This is a request to create a new feature for managing API keys for different AI providers (Google Gemini, xAI Grok, OpenRouter) in the AI dashboard. Let's break down what I need to do:
Create a new page /admin/ai-dashboard/api-keys-management for managing API keys with the format: provider-key-email_address
Support multiple providers:
Google Gemini (using google-gemini-php/laravel)
xAI Grok (using grok-php/laravel)
OpenRouter (current implementation)
Make the system extendable to add more providers in the future
Modify the UI to allow selection of provider and then model based on the selected provider
If multiple API keys exist for a provider, randomly select one when using the service
Let's design the implementation:
1. Database Schema for API Keys
First, I'll need a new table to store API keys with their providers:
php

Schema::create('ai_api_keys', function (Blueprint $table) {
    $table->id();
    $table->string('provider'); // 'google-gemini', 'xai-grok', 'openrouter'
    $table->string('api_key');
    $table->string('email');
    $table->boolean('is_active')->default(true);
    $table->timestamps();
});
2. Model for API Keys
php

namespace App\Models;

use Illuminate\Database\Eloquent\Model;

class AIApiKey extends Model
{
    protected $table = 'ai_api_keys';
    
    protected $fillable = [
        'provider',
        'api_key',
        'email',
        'is_active'
    ];
    
    // Get a random active API key for a provider
    public static function getRandomKeyForProvider($provider)
    {
        return self::where('provider', $provider)
            ->where('is_active', true)
            ->inRandomOrder()
            ->first();
    }
}
3. Controller for API Keys Management
php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\AIApiKey;
use Illuminate\Http\Request;

class AIApiKeysController extends Controller
{
    public function index()
    {
        $apiKeys = AIApiKey::all();
        $providers = [
            'google-gemini' => 'Google Gemini',
            'xai-grok' => 'xAI Grok',
            'openrouter' => 'OpenRouter'
        ];
        
        return view('admin.ai-dashboard.api-keys', compact('apiKeys', 'providers'));
    }
    
    public function store(Request $request)
    {
        $request->validate([
            'provider' => 'required|string',
            'api_key' => 'required|string',
            'email' => 'required|email'
        ]);
        
        AIApiKey::create($request->all());
        
        return redirect()->route('admin.ai-dashboard.api-keys')->with('success', 'API key added successfully');
    }
    
    public function update(Request $request, $id)
    {
        $request->validate([
            'provider' => 'required|string',
            'api_key' => 'required|string',
            'email' => 'required|email',
            'is_active' => 'boolean'
        ]);
        
        $apiKey = AIApiKey::findOrFail($id);
        $apiKey->update($request->all());
        
        return redirect()->route('admin.ai-dashboard.api-keys')->with('success', 'API key updated successfully');
    }
    
    public function destroy($id)
    {
        $apiKey = AIApiKey::findOrFail($id);
        $apiKey->delete();
        
        return redirect()->route('admin.ai-dashboard.api-keys')->with('success', 'API key deleted successfully');
    }
    
    public function toggleStatus($id)
    {
        $apiKey = AIApiKey::findOrFail($id);
        $apiKey->is_active = !$apiKey->is_active;
        $apiKey->save();
        
        return redirect()->route('admin.ai-dashboard.api-keys')->with('success', 'API key status updated');
    }
}
4. API Keys Management View
Create a new view at resources/views/admin/ai-dashboard/api-keys.blade.php.
5. Service Provider Architecture
Now let's create a more flexible architecture to handle different AI providers. I'll create a factory pattern with adapter classes for each provider.
First, let's define an interface that all AI services must implement:
php

namespace App\Services\AI;

interface AIServiceInterface
{
    public function generate($model, $prompt, $options = [], $useHtmlMeta = false);
    public function analyzeImage($imageUrl, $prompt, $options = []);
    public function getAvailableModels();
}
Then, let's create adapter classes for each provider:
php

namespace App\Services\AI\Adapters;

use App\Services\AI\AIServiceInterface;
use Google\Gemini\Laravel\Facades\Gemini;

class GeminiAdapter implements AIServiceInterface
{
    private $apiKey;
    
    public function __construct($apiKey)
    {
        $this->apiKey = $apiKey;
        // Configure Gemini with API key
        config(['gemini.api_key' => $apiKey]);
    }
    
    public function generate($model, $prompt, $options = [], $useHtmlMeta = false)
    {
        // Map to Gemini API
        $result = Gemini::geminiPro()->generateContent($prompt);
        
        // Process and standardize the response format
        return $this->formatResponse($result);
    }
    
    public function analyzeImage($imageUrl, $prompt, $options = [])
    {
        // Implement vision analysis with Gemini
        // ...
    }
    
    public function getAvailableModels()
    {
        return [
            'gemini-2.0-flash' => 'Gemini 2.0 Flash',
            'gemini-2.0-flash-lite' => 'Gemini 2.0 Flash Lite',
            // Add other models
        ];
    }
    
    private function formatResponse($result)
    {
        // Standardize the response format to match our application expectations
        // ...
    }
}

namespace App\Services\AI\Adapters;

use App\Services\AI\AIServiceInterface;
use GrokPHP\Laravel\Facades\GrokAI;

class GrokAdapter implements AIServiceInterface
{
    private $apiKey;
    
    public function __construct($apiKey)
    {
        $this->apiKey = $apiKey;
        // Configure Grok with API key
        config(['grok.api_key' => $apiKey]);
    }
    
    public function generate($model, $prompt, $options = [], $useHtmlMeta = false)
    {
        // Map to Grok API
        $messages = [['role' => 'user', 'content' => $prompt]];
        $response = GrokAI::chat($messages);
        
        // Process and standardize the response format
        return $this->formatResponse($response);
    }
    
    public function analyzeImage($imageUrl, $prompt, $options = [])
    {
        // Implement vision analysis with Grok
        // ...
    }
    
    public function getAvailableModels()
    {
        return [
            'grok-2' => 'Grok 2',
            'grok-2-vision' => 'Grok 2 Vision',
            // Add other models
        ];
    }
    
    private function formatResponse($result)
    {
        // Standardize the response format to match our application expectations
        // ...
    }
}

namespace App\Services\AI\Adapters;

use App\Services\AI\AIServiceInterface;
use MoeMizrak\LaravelOpenrouter\Facades\LaravelOpenRouter;

class OpenRouterAdapter implements AIServiceInterface
{
    private $apiKey;
    
    public function __construct($apiKey)
    {
        $this->apiKey = $apiKey;
        // Configure OpenRouter with API key
        config(['openrouter.api_key' => $apiKey]);
    }
    
    public function generate($model, $prompt, $options = [], $useHtmlMeta = false)
    {
        // Use existing OpenRouter implementation
        // ...
    }
    
    public function analyzeImage($imageUrl, $prompt, $options = [])
    {
        // Implement vision analysis with OpenRouter
        // ...
    }
    
    public function getAvailableModels()
    {
        return [
            'grok-2' => 'Grok 2 (OpenRouter)',
            'deepseek-chat' => 'DeepSeek Chat',
            // Add other models from current implementation
        ];
    }
    
    private function formatResponse($result)
    {
        // Standardize the response format to match our application expectations
        // ...
    }
}
6. AI Service Factory
php

namespace App\Services\AI;

use App\Models\AIApiKey;
use App\Services\AI\Adapters\GeminiAdapter;
use App\Services\AI\Adapters\GrokAdapter;
use App\Services\AI\Adapters\OpenRouterAdapter;

class AIServiceFactory
{
    public static function createService($provider = null)
    {
        if (!$provider) {
            // Default provider if none specified
            $provider = 'openrouter';
        }
        
        // Get a random API key for the provider
        $apiKeyModel = AIApiKey::getRandomKeyForProvider($provider);
        
        if (!$apiKeyModel) {
            throw new \Exception("No active API key found for provider: {$provider}");
        }
        
        $apiKey = $apiKeyModel->api_key;
        
        switch ($provider) {
            case 'google-gemini':
                return new GeminiAdapter($apiKey);
            case 'xai-grok':
                return new GrokAdapter($apiKey);
            case 'openrouter':
                return new OpenRouterAdapter($apiKey);
            default:
                throw new \Exception("Unsupported AI provider: {$provider}");
        }
    }
    
    public static function getAvailableProviders()
    {
        return [
            'google-gemini' => 'Google Gemini',
            'xai-grok' => 'xAI Grok',
            'openrouter' => 'OpenRouter'
        ];
    }
}
7. Update the AIService class
Modify the existing AIService class to use our factory:
php

namespace App\Services;

use App\Services\AI\AIServiceFactory;

class AIService
{
    private $service;
    private $provider;
    
    public function __construct($provider = null)
    {
        $this->provider = $provider;
        $this->service = AIServiceFactory::createService($provider);
    }
    
    public function setProvider($provider)
    {
        $this->provider = $provider;
        $this->service = AIServiceFactory::createService($provider);
        return $this;
    }
    
    public function generate($model, $prompt, $options = [], $useHtmlMeta = false)
    {
        return $this->service->generate($model, $prompt, $options, $useHtmlMeta);
    }
    
    public function analyzeImage($imageUrl, $prompt, $options = [])
    {
        return $this->service->analyzeImage($imageUrl, $prompt, $options);
    }
    
    public function getAvailableModels()
    {
        return $this->service->getAvailableModels();
    }
    
    public static function getAvailableProviders()
    {
        return AIServiceFactory::getAvailableProviders();
    }
}
8. Update AIController for API Key Management
I need to update the AIDashboardController to handle the provider selection first, then model selection based on the provider:
php

// In AIDashboardController.php

public function getProviders()
{
    return response()->json(AIService::getAvailableProviders());
}

public function getModelsForProvider($provider)
{
    $aiService = new AIService($provider);
    return response()->json($aiService->getAvailableModels());
}
9. Modify UI for Provider and Model Selection
Update the views (playground, stats) to first select the provider, then load the appropriate models based on the selected provider via AJAX.
10. Routes
Add new routes in web.php:
php

Route::prefix('admin/ai-dashboard')->middleware(['admin'])->group(function () {
    // Existing routes...
    
    // API Keys management
    Route::get('/api-keys', [App\Http\Controllers\Admin\AIApiKeysController::class, 'index'])->name('admin.ai-dashboard.api-keys');
    Route::post('/api-keys', [App\Http\Controllers\Admin\AIApiKeysController::class, 'store'])->name('admin.ai-dashboard.api-keys.store');
    Route::put('/api-keys/{id}', [App\Http\Controllers\Admin\AIApiKeysController::class, 'update'])->name('admin.ai-dashboard.api-keys.update');
    Route::delete('/api-keys/{id}', [App\Http\Controllers\Admin\AIApiKeysController::class, 'destroy'])->name('admin.ai-dashboard.api-keys.destroy');
    Route::post('/api-keys/{id}/toggle', [App\Http\Controllers\Admin\AIApiKeysController::class, 'toggleStatus'])->name('admin.ai-dashboard.api-keys.toggle');
    
    // API endpoints for provider/model selection
    Route::get('/providers', [App\Http\Controllers\Admin\AIDashboardController::class, 'getProviders'])->name('admin.ai-dashboard.providers');
    Route::get('/providers/{provider}/models', [App\Http\Controllers\Admin\AIDashboardController::class, 'getModelsForProvider'])->name('admin.ai-dashboard.provider-models');
});
11. Migration
Create a migration for the new table:
php

php artisan make:migration create_ai_api_keys_table
This implementation provides a solid, extendable foundation for managing multiple AI providers and their API keys. The adapter pattern allows us to add new providers easily in the future without changing the core functionality.
Let me now create code file by file.
Migration file:
php

<?php

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

class CreateAIApiKeysTable extends Migration
{
    /**
     * Run the migrations.
     */
    public function up(): void
    {
        Schema::create('ai_api_keys', function (Blueprint $table) {
            $table->id();
            $table->string('provider'); // 'google-gemini', 'xai-grok', 'openrouter'
            $table->string('api_key');
            $table->string('email');
            $table->boolean('is_active')->default(true);
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     */
    public function down(): void
    {
        Schema::dropIfExists('ai_api_keys');
    }
}
AIApiKey model:
php

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class AIApiKey extends Model
{
    use HasFactory;
    
    protected $table = 'ai_api_keys';
    
    protected $fillable = [
        'provider',
        'api_key',
        'email',
        'is_active'
    ];
    
    protected $casts = [
        'is_active' => 'boolean',
    ];
    
    /**
     * Get a random active API key for a provider
     *
     * @param string $provider
     * @return \App\Models\AIApiKey|null
     */
    public static function getRandomKeyForProvider($provider)
    {
        return self::where('provider', $provider)
            ->where('is_active', true)
            ->inRandomOrder()
            ->first();
    }
    
    /**
     * Get all active providers that have at least one API key
     *
     * @return array
     */
    public static function getActiveProviders()
    {
        return self::where('is_active', true)
            ->groupBy('provider')
            ->pluck('provider')
            ->toArray();
    }
}
AIServiceInterface:
php

<?php

namespace App\Services\AI;

interface AIServiceInterface
{
    /**
     * Generate content using AI
     *
     * @param string $model
     * @param string|array $prompt
     * @param array $options
     * @param bool $useHtmlMeta
     * @return mixed
     */
    public function generate($model, $prompt, $options = [], $useHtmlMeta = false);
    
    /**
     * Analyze an image using AI
     *
     * @param string $imageUrl
     * @param string $prompt
     * @param array $options
     * @return mixed
     */
    public function analyzeImage($imageUrl, $prompt, $options = []);
    
    /**
     * Get available models for this provider
     *
     * @return array
     */
    public function getAvailableModels();
}
GeminiAdapter:
php

<?php

namespace App\Services\AI\Adapters;

use App\Services\AI\AIServiceInterface;
use Gemini\Laravel\Facades\Gemini;
use Gemini\Enums\ModelType;
use Gemini\Data\Content;
use Gemini\Data\ImagePart;
use Gemini\Enums\MimeType;
use Gemini\Data\GenerationConfig;
use Gemini\Responses\GenerativeModel\GenerateContentResponse;
use Illuminate\Support\Facades\Log;

class GeminiAdapter implements AIServiceInterface
{
    private $apiKey;
    
    /**
     * Constructor
     *
     * @param string $apiKey
     */
    public function __construct($apiKey)
    {
        $this->apiKey = $apiKey;
        // Configure Gemini with API key
        config(['gemini.api_key' => $apiKey]);
    }
    
    /**
     * Generate content using Gemini
     *
     * @param string $model
     * @param string|array $prompt
     * @param array $options
     * @param bool $useHtmlMeta
     * @return array
     */
    public function generate($model, $prompt, $options = [], $useHtmlMeta = false)
    {
        try {
            // Determine which model to use
            $geminiModel = $this->getGeminiModel($model);
            
            // Create generation config from options
            $generationConfig = null;
            if (isset($options['temperature']) || isset($options['max_tokens'])) {
                $generationConfig = new GenerationConfig(
                    temperature: $options['temperature'] ?? 0.7,
                    maxOutputTokens: $options['max_tokens'] ?? 1024
                );
            }
            
            // Create and configure the model
            $gemini = Gemini::generativeModel($geminiModel);
            
            if ($generationConfig) {
                $gemini = $gemini->withGenerationConfig($generationConfig);
            }
            
            // Generate content
            $result = $gemini->generateContent($prompt);
            
            // Format response to standard format
            return $this->formatResponse($result);
        } catch (\Exception $e) {
            Log::error('Gemini generation error', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            throw $e;
        }
    }
    
    /**
     * Analyze an image using Gemini Vision
     *
     * @param string $imageUrl
     * @param string $prompt
     * @param array $options
     * @return array
     */
    public function analyzeImage($imageUrl, $prompt, $options = [])
    {
        try {
            // Get image data
            $imageData = file_get_contents($imageUrl);
            if (!$imageData) {
                throw new \Exception("Failed to fetch image data from URL: {$imageUrl}");
            }
            
            // Create content with image
            $content = [
                $prompt,
                new \Gemini\Data\Blob(
                    mimeType: \Gemini\Enums\MimeType::IMAGE_JPEG,
                    data: base64_encode($imageData)
                )
            ];
            
            // Generate content with Vision model
            $result = Gemini::geminiProVision()->generateContent($content);
            
            // Format response to standard format
            return $this->formatResponse($result);
        } catch (\Exception $e) {
            Log::error('Gemini vision analysis error', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            throw $e;
        }
    }
    
    /**
     * Get available models for Gemini
     *
     * @return array
     */
    public function getAvailableModels()
    {
        return [
            'gemini-pro' => 'Gemini Pro',
            'gemini-pro-vision' => 'Gemini Pro Vision',
            'gemini-2.0-flash' => 'Gemini 2.0 Flash',
            'gemini-2.0-flash-lite' => 'Gemini 2.0 Flash Lite',
        ];
    }
    
    /**
     * Map model name to Gemini model
     *
     * @param string $model
     * @return string
     */
    private function getGeminiModel($model)
    {
        $modelMap = [
            'gemini-pro' => ModelType::GEMINI_PRO,
            'gemini-pro-vision' => ModelType::GEMINI_PRO_VISION,
            'gemini-2.0-flash' => 'models/gemini-2.0-flash',
            'gemini-2.0-flash-lite' => 'models/gemini-2.0-flash-lite',
        ];
        
        return $modelMap[$model] ?? ModelType::GEMINI_PRO;
    }
    
    /**
     * Format response to standardized structure
     *
     * @param GenerateContentResponse $result
     * @return array
     */
    private function formatResponse($result)
    {
        // Extract the text content
        $content = $result->text();
        
        // Format to match our application expected format
        return [
            'choices' => [
                [
                    'message' => [
                        'content' => $content,
                    ],
                ],
            ],
        ];
    }
}
GrokAdapter:
php

<?php

namespace App\Services\AI\Adapters;

use App\Services\AI\AIServiceInterface;
use GrokPHP\Laravel\Facades\GrokAI;
use GrokPHP\Client\Config\ChatOptions;
use GrokPHP\Client\Enums\Model;
use Illuminate\Support\Facades\Log;

class GrokAdapter implements AIServiceInterface
{
    private $apiKey;
    
    /**
     * Constructor
     *
     * @param string $apiKey
     */
    public function __construct($apiKey)
    {
        $this->apiKey = $apiKey;
        // Configure Grok with API key
        config(['grok.api_key' => $apiKey]);
    }
    
    /**
     * Generate content using Grok AI
     *
     * @param string $model
     * @param string|array $prompt
     * @param array $options
     * @param bool $useHtmlMeta
     * @return array
     */
    public function generate($model, $prompt, $options = [], $useHtmlMeta = false)
    {
        try {
            // Format the prompt as messages
            $messages = $this->formatPromptAsMessages($prompt);
            
            // Create chat options
            $chatOptions = new ChatOptions(
                model: $this->getGrokModel($model),
                temperature: $options['temperature'] ?? 0.7,
                stream: $options['stream'] ?? false
            );
            
            // Generate content
            $response = GrokAI::chat($messages, $chatOptions);
            
            // Format response to standard format
            return $this->formatResponse($response);
        } catch (\Exception $e) {
            Log::error('Grok generation error', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            throw $e;
        }
    }
    
    /**
     * Analyze an image using Grok Vision
     *
     * @param string $imageUrl
     * @param string $prompt
     * @param array $options
     * @return array
     */
    public function analyzeImage($imageUrl, $prompt, $options = [])
    {
        try {
            // Use Grok Vision API
            $response = GrokAI::vision()->analyze($imageUrl, $prompt);
            
            // Format response to standard format
            return $this->formatResponse($response);
        } catch (\Exception $e) {
            Log::error('Grok vision analysis error', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            throw $e;
        }
    }
    
    /**
     * Get available models for Grok
     *
     * @return array
     */
    public function getAvailableModels()
    {
        return [
            'grok-2' => 'Grok 2',
            'grok-2-latest' => 'Grok 2 Latest',
            'grok-2-vision' => 'Grok 2 Vision',
            'grok-2-vision-latest' => 'Grok 2 Vision Latest',
        ];
    }
    
    /**
     * Map model name to Grok model
     *
     * @param string $model
     * @return string
     */
    private function getGrokModel($model)
    {
        $modelMap = [
            'grok-2' => Model::GROK_2,
            'grok-2-latest' => Model::GROK_2_LATEST,
            'grok-2-vision' => Model::GROK_2_VISION,
            'grok-2-vision-latest' => Model::GROK_2_VISION_LATEST,
        ];
        
        return $modelMap[$model] ?? Model::GROK_2;
    }
    
    /**
     * Format a prompt into messages for Grok
     *
     * @param string|array $prompt
     * @return array
     */
    private function formatPromptAsMessages($prompt)
    {
        // If prompt is already an array of messages, return as is
        if (is_array($prompt) && isset($prompt[0]['role'])) {
            return $prompt;
        }
        
        // Convert string prompt to a single user message
        return [
            ['role' => 'user', 'content' => is_string($prompt) ? $prompt : json_encode($prompt)]
        ];
    }
    
    /**
     * Format response to standardized structure
     *
     * @param mixed $response
     * @return array
     */
    private function formatResponse($response)
    {
        // Extract content from Grok response
        $content = $response->content();
        
        // Format to match our application expected format
        return [
            'choices' => [
                [
                    'message' => [
                        'content' => $content,
                    ],
                ],
            ],
        ];
    }
}
OpenRouterAdapter (using existing functionality):
php

<?php

namespace App\Services\AI\Adapters;

use App\Services\AI\AIServiceInterface;
use MoeMizrak\LaravelOpenrouter\DTO\ChatData;
use MoeMizrak\LaravelOpenrouter\DTO\MessageData;
use MoeMizrak\LaravelOpenrouter\DTO\ResponseFormatData;
use MoeMizrak\LaravelOpenrouter\DTO\ProviderPreferencesData;
use MoeMizrak\LaravelOpenrouter\DTO\ImageContentPartData;
use MoeMizrak\LaravelOpenrouter\DTO\ImageUrlData;
use MoeMizrak\LaravelOpenrouter\DTO\TextContentData;
use MoeMizrak\LaravelOpenrouter\Facades\LaravelOpenRouter;
use MoeMizrak\LaravelOpenrouter\Types\RoleType;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Arr;

class OpenRouterAdapter implements AIServiceInterface
{
    private $apiKey;
    
    /**
     * Constructor
     *
     * @param string $apiKey
     */
    public function __construct($apiKey)
    {
        $this->apiKey = $apiKey;
        // Configure OpenRouter with API key
        config(['openrouter.api_key' => $apiKey]);
    }
    
    /**
     * Generate content using OpenRouter
     *
     * @param string $model
     * @param string|array $prompt
     * @param array $options
     * @param bool $useHtmlMeta
     * @return array
     */
    public function generate($model, $prompt, $options = [], $useHtmlMeta = false)
    {
        try {
            // Prepare system message if provided
            $messages = [];
            if (!empty($options['system_message'])) {
                $messages[] = new MessageData(
                    content: $options['system_message'],
                    role: RoleType::SYSTEM
                );
            }

            $processedPrompt = $this->processPrompt($prompt, $options['content_type'] ?? 'generic', $useHtmlMeta);

            // Add user message
            $messages[] = new MessageData(
                content: $processedPrompt,
                role: RoleType::USER
            );

            // Prepare parameters for ChatData
            $chatDataParams = [
                'messages' => $messages,
                'model' => $model
            ];

            // Add optional parameters
            $allowedParams = [
                'temperature', 'top_p', 'frequency_penalty',
                'presence_penalty', 'stop', 'max_tokens'
            ];

            foreach ($allowedParams as $param) {
                if (isset($options[$param]) && !empty($options[$param])) {
                    $chatDataParams[$param] = $options[$param];
                }
            }

            // Create ChatData from parameters
            $chatData = ChatData::from($chatDataParams);

            // Handle structured output if requested
            if (!empty($options['use_html_meta'])) {
                $chatData->response_format = new ResponseFormatData(
                    type: 'json_object'
                );

                $chatData->provider = new ProviderPreferencesData(
                    require_parameters: true
                );
            }

            // Make the request
            $response = LaravelOpenRouter::chatRequest($chatData);

            // Return the response directly, as OpenRouter already returns in the expected format
            return $response;
        } catch (\Exception $e) {
            Log::error('OpenRouter generation error', [
                'model' => $model,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            throw $e;
        }
    }
    
    /**
     * Analyze an image using OpenRouter
     *
     * @param string $imageUrl
     * @param string $prompt
     * @param array $options
     * @return array
     */
    public function analyzeImage($imageUrl, $prompt, $options = [])
    {
        try {
            Log::debug('Starting image analysis', [
                'prompt_preview' => substr($prompt, 0, 100),
                'image_url' => $imageUrl
            ]);

            // Map model name
            $modelName = $options['model'] ?? 'grok-2-vision';
            if (isset($options['model_variant'])) {
                $modelName = $options['model_variant'];
            }
            $openRouterModel = $this->mapModelName($modelName);

            Log::debug('Mapped vision model', [
                'original' => $modelName,
                'mapped' => $openRouterModel
            ]);

            // Create content parts with text and image
            $messageParts = [];

            // Add text content
            $messageParts[] = new TextContentData(
                type: TextContentData::ALLOWED_TYPE,
                text: $prompt
            );

            // Add image content
            $messageParts[] = new ImageContentPartData(
                type: ImageContentPartData::ALLOWED_TYPE,
                image_url: new ImageUrlData(
                    url: $imageUrl
                )
            );

            // Prepare messages
            $messages = [];
            if (!empty($options['system_message'])) {
                $messages[] = new MessageData(
                    content: $options['system_message'],
                    role: RoleType::SYSTEM
                );
            }

            // Add user message with content parts
            $messages[] = new MessageData(
                content: $messageParts,
                role: RoleType::USER
            );

            Log::debug('Creating vision ChatData', [
                'model' => $openRouterModel,
                'message_count' => count($messages)
            ]);

            // Create ChatData
            $chatData = new ChatData([
                'messages' => $messages,
                'model' => $openRouterModel,
                'temperature' => $options['temperature'] ?? 0.7
            ]);

            // Only add max_tokens if it was provided or is a reasonable value
            if (!empty($options['max_tokens']) && $options['max_tokens'] > 0) {
                $chatData->max_tokens = $options['max_tokens'];
            }

            // Make request
            Log::debug('Sending vision request to OpenRouter');
            $response = LaravelOpenRouter::chatRequest($chatData);

            Log::debug('Received vision response', [
                'has_choices' => isset($response->choices) ? 'yes' : 'no'
            ]);

            // Return the response directly
            return $response;
        } catch (\Exception $e) {
            Log::error('OpenRouter vision analysis error', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            throw $e;
        }
    }
    
    /**
     * Get available models for OpenRouter
     *
     * @return array
     */
    public function getAvailableModels()
    {
        // Return the models from the existing mapModelName method
        return [
            'x-ai/grok-2' => 'Grok 2 (OpenRouter)',
            'x-ai/grok-2-vision-1212' => 'Grok 2 Vision (OpenRouter)',
            'deepseek/deepseek-chat:free' => 'DeepSeek Chat',
            'deepseek/deepseek-r1:free' => 'DeepSeek R1',
            'google/gemini-2.0-flash-thinking-exp:free' => 'Gemini 2.0 Flash (OR)',
            'google/gemma-3-1b-it:free' => 'Gemma 3 (OpenRouter)',
            'qwen/qwq-32b:free' => 'Qwen 32B',
            'meta-llama/llama-3.2-1b-instruct:free' => 'Llama 3.2',
            'mistralai/mistral-small-3.1-24b-instruct:free' => 'Mistral 3.1',
        ];
    }
    
    /**
     * Map model name to OpenRouter format
     *
     * @param string $model
     * @return string
     */
    private function mapModelName($model)
    {
        // Map model names from old format to OpenRouter format
        $modelMap = [
            // DeepSeek models
            'deepseek-v3' => 'deepseek/deepseek-chat:free',
            'deepseek-chat' => 'deepseek/deepseek-chat:free',
            'deepseek-r1' => 'deepseek/deepseek-r1:free',

            // Grok models - text
            'grok-2' => 'x-ai/grok-2',
            'grok-2-latest' => 'x-ai/grok-2',
            'grok-2-1212' => 'x-ai/grok-2-1212',
            'grok-2-mini' => 'x-ai/grok-2-mini',

            // Grok models - vision
            'grok-2-vision' => 'x-ai/grok-2-vision-1212',
            'grok-2-vision-latest' => 'x-ai/grok-2-vision-1212',
            
            // Google models
            'google/gemini-2.0-flash-thinking-exp:free' => 'google/gemini-2.0-flash-thinking-exp:free',
            'google/gemma-3-1b-it:free' => 'google/gemma-3-1b-it:free',
            'google/gemma-3-27b-it:free' => 'google/gemma-3-27b-it:free',

            // Other models
            'qwen/qwq-32b:free' => 'qwen/qwq-32b:free',
            'meta-llama/llama-3.2-1b-instruct:free' => 'meta-llama/llama-3.2-1b-instruct:free',
            'mistralai/mistral-small-3.1-24b-instruct:free' => 'mistralai/mistral-small-3.1-24b-instruct:free',
        ];

        // If the model is already in the correct format (contains a slash), use it directly
        if (str_contains($model, '/')) {
            return $model;
        }

        return $modelMap[$model] ?? 'x-ai/grok-2';  // Default to Grok-2 if unknown
    }
    
    /**
     * Process and format prompt to guide AI model's response format
     *
     * @param string $prompt
     * @param string $contentType
     * @param bool $useHtmlMeta
     * @return string
     */
    private function processPrompt($prompt, $contentType, $useHtmlMeta = false)
    {
        // Reuse the existing process prompt logic from AIService
        // This is a placeholder - in a real implementation, you'd include the full method
        return $prompt;
    }
}
AIServiceFactory:
php

<?php

namespace App\Services\AI;

use App\Models\AIApiKey;
use App\Services\AI\Adapters\GeminiAdapter;
use App\Services\AI\Adapters\GrokAdapter;
use App\Services\AI\Adapters\OpenRouterAdapter;

class AIServiceFactory
{
    /**
     * Create an AI service for the specified provider
     *
     * @param string|null $provider
     * @return AIServiceInterface
     * @throws \Exception
     */
    public static function createService($provider = null)
    {
        if (!$provider) {
            // Default provider if none specified
            $provider = 'openrouter';
        }
        
        // Get a random API key for the provider
        $apiKeyModel = AIApiKey::getRandomKeyForProvider($provider);
        
        if (!$apiKeyModel) {
            throw new \Exception("No active API key found for provider: {$provider}");
        }
        
        $apiKey = $apiKeyModel->api_key;
        
        switch ($provider) {
            case 'google-gemini':
                return new GeminiAdapter($apiKey);
            case 'xai-grok':
                return new GrokAdapter($apiKey);
            case 'openrouter':
                return new OpenRouterAdapter($apiKey);
            default:
                throw new \Exception("Unsupported AI provider: {$provider}");
        }
    }
    
    /**
     * Get all available providers with their display names
     *
     * @return array
     */
    public static function getAvailableProviders()
    {
        return [
            'google-gemini' => 'Google Gemini',
            'xai-grok' => 'xAI Grok',
            'openrouter' => 'OpenRouter'
        ];
    }
    
    /**
     * Get active providers that have API keys
     *
     * @return array
     */
    public static function getActiveProviders()
    {
        $activeProviderCodes = AIApiKey::getActiveProviders();
        $allProviders = self::getAvailableProviders();
        
        $activeProviders = [];
        foreach ($activeProviderCodes as $code) {
            if (isset($allProviders[$code])) {
                $activeProviders[$code] = $allProviders[$code];
            }
        }
        
        return $activeProviders;
    }
}
Updated AIService:
php

<?php

namespace App\Services;

use App\Services\AI\AIServiceFactory;
use App\Services\AI\AIServiceInterface;
use Illuminate\Support\Facades\Log;

class AIService
{
    /**
     * @var AIServiceInterface
     */
    private $service;
    
    /**
     * @var string
     */
    private $provider;
    
    /**
     * Constructor
     *
     * @param string|null $provider
     */
    public function __construct($provider = null)
    {
        $this->provider = $provider ?: 'openrouter';
        $this->service = AIServiceFactory::createService($this->provider);
    }
    
    /**
     * Set or change the AI provider
     *
     * @param string $provider
     * @return $this
     */
    public function setProvider($provider)
    {
        if ($this->provider !== $provider) {
            $this->provider = $provider;
            $this->service = AIServiceFactory::createService($provider);
        }
        return $this;
    }
    
    /**
     * Generate content using the current AI service
     *
     * @param string $model
     * @param string|array $prompt
     * @param array $options
     * @param bool $useHtmlMeta
     * @return mixed
     */
    public function generate($model, $prompt, $options = [], $useHtmlMeta = false)
    {
        try {
            return $this->service->generate($model, $prompt, $options, $useHtmlMeta);
        } catch (\Exception $e) {
            Log::error('AI generation error', [
                'provider' => $this->provider,
                'model' => $model,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            // Rethrow the exception
            throw $e;
        }
    }
    
    /**
     * Analyze an image using the current AI service
     *
     * @param string $imageUrl
     * @param string $prompt
     * @param array $options
     * @return mixed
     */
    public function analyzeImage($imageUrl, $prompt, $options = [])
    {
        try {
            return $this->service->analyzeImage($imageUrl, $prompt, $options);
        } catch (\Exception $e) {
            Log::error('AI image analysis error', [
                'provider' => $this->provider,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            // Rethrow the exception
            throw $e;
        }
    }
    
    /**
     * Get available models for the current AI service
     *
     * @return array
     */
    public function getAvailableModels()
    {
        return $this->service->getAvailableModels();
    }
    
    /**
     * Get all available providers
     *
     * @return array
     */
    public static function getAvailableProviders()
    {
        return AIServiceFactory::getAvailableProviders();
    }
    
    /**
     * Get active providers that have API keys
     *
     * @return array
     */
    public static function getActiveProviders()
    {
        return AIServiceFactory::getActiveProviders();
    }
    
    /**
     * Get the current provider
     *
     * @return string
     */
    public function getProvider()
    {
        return $this->provider;
    }
}
AIApiKeysController:
php

<?php

namespace App\Http\Controllers\Admin;

use App\Http\Controllers\Controller;
use App\Models\AIApiKey;
use App\Services\AI\AIServiceFactory;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Log;

class AIApiKeysController extends Controller
{
    /**
     * Display the API keys management page
     *
     * @return \Illuminate\View\View
     */
    public function index()
    {
        $apiKeys = AIApiKey::orderBy('provider')->orderBy('email')->get();
        $providers = AIServiceFactory::getAvailableProviders();
        
        return view('admin.ai-dashboard.api-keys', compact('apiKeys', 'providers'));
    }
    
    /**
     * Store a new API key
     *
     * @param \Illuminate\Http\Request $request
     * @return \Illuminate\Http\RedirectResponse
     */
    public function store(Request $request)
    {
        $validated = $request->validate([
            'provider' => 'required|string|in:' . implode(',', array_keys(AIServiceFactory::getAvailableProviders())),
            'api_key' => 'required|string',
            'email' => 'required|email'
        ]);
        
        try {
            AIApiKey::create($validated);
            
            return redirect()->route('admin.ai-dashboard.api-keys')
                ->with('success', 'API key added successfully');
        } catch (\Exception $e) {
            Log::error('Error adding API key', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);
            
            return redirect()->route('admin.ai-dashboard.api-keys')
                ->with('error', 'Error adding API key: ' . $e->getMessage());
        }
    }
    
    /**
     * Update an API key
     *
     * @param \Illuminate\Http\Request $request
     * @param int $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function update(Request $request, $id)
    {
        $validated = $request->validate([
            'provider' => 'required|string|in:' . implode(',', array_keys(AIServiceFactory::getAvailableProviders())),
            'api_key' => 'required|string',
            'email' => 'required|email',
            'is_active' => 'boolean'
        ]);
        
        try {
            $apiKey = AIApiKey::findOrFail($id);
            $apiKey->update($validated);
            
            return redirect()->route('admin.ai-dashboard.api-keys')
                ->with('success', 'API key updated successfully');
        } catch (\Exception $e) {
            Log::error('Error updating API key', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'id' => $id
            ]);
            
            return redirect()->route('admin.ai-dashboard.api-keys')
                ->with('error', 'Error updating API key: ' . $e->getMessage());
        }
    }
    
    /**
     * Delete an API key
     *
     * @param int $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function destroy($id)
    {
        try {
            $apiKey = AIApiKey::findOrFail($id);
            $apiKey->delete();
            
            return redirect()->route('admin.ai-dashboard.api-keys')
                ->with('success', 'API key deleted successfully');
        } catch (\Exception $e) {
            Log::error('Error deleting API key', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'id' => $id
            ]);
            
            return redirect()->route('admin.ai-dashboard.api-keys')
                ->with('error', 'Error deleting API key: ' . $e->getMessage());
        }
    }
    
    /**
     * Toggle API key status
     *
     * @param int $id
     * @return \Illuminate\Http\RedirectResponse
     */
    public function toggleStatus($id)
    {
        try {
            $apiKey = AIApiKey::findOrFail($id);
            $apiKey->is_active = !$apiKey->is_active;
            $apiKey->save();
            
            return redirect()->route('admin.ai-dashboard.api-keys')
                ->with('success', 'API key status updated successfully');
        } catch (\Exception $e) {
            Log::error('Error toggling API key status', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'id' => $id
            ]);
            
            return redirect()->route('admin.ai-dashboard.api-keys')
                ->with('error', 'Error updating API key status: ' . $e->getMessage());
        }
    }
    
    /**
     * Test API key connection
     *
     * @param int $id
     * @return \Illuminate\Http\JsonResponse
     */
    public function testConnection($id)
    {
        try {
            $apiKey = AIApiKey::findOrFail($id);
            
            // Create service for the provider
            $service = AIServiceFactory::createService($apiKey->provider);
            
            // Get a sample model
            $models = $service->getAvailableModels();
            $sampleModel = array_key_first($models);
            
            // Make a simple request
            $result = $service->generate(
                $sampleModel, 
                'This is a test prompt to verify API key connectivity. Please respond with "Connected successfully".',
                ['temperature' => 0.1, 'max_tokens' => 20]
            );
            
            return response()->json([
                'success' => true,
                'message' => 'API key connection test successful',
                'result' => $result
            ]);
        } catch (\Exception $e) {
            Log::error('API key connection test failed', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
                'id' => $id
            ]);
            
            return response()->json([
                'success' => false,
                'message' => 'API key connection test failed: ' . $e->getMessage()
            ], 500);
        }
    }
}
Update AIDashboardController to add new routes:
php

/**
 * Get available AI providers
 *
 * @return \Illuminate\Http\JsonResponse
 */
public function getProviders()
{
    $providers = AIService::getActiveProviders();
    
    return response()->json($providers);
}

/**
 * Get models for a specific provider
 *
 * @param string $provider
 * @return \Illuminate\Http\JsonResponse
 */
public function getModelsForProvider($provider)
{
    try {
        $aiService = new AIService($provider);
        $models = $aiService->getAvailableModels();
        
        return response()->json($models);
    } catch (\Exception $e) {
        Log::error('Error getting models for provider', [
            'provider' => $provider,
            'error' => $e->getMessage()
        ]);
        
        return response()->json(['error' => $e->getMessage()], 500);
    }
}
Add routes to web.php:
php

// AI API Keys management
Route::get('/api-keys', [App\Http\Controllers\Admin\AIApiKeysController::class, 'index'])->name('admin.ai-dashboard.api-keys');
Route::post('/api-keys', [App\Http\Controllers\Admin\AIApiKeysController::class, 'store'])->name('admin.ai-dashboard.api-keys.store');
Route::put('/api-keys/{id}', [App\Http\Controllers\Admin\AIApiKeysController::class, 'update'])->name('admin.ai-dashboard.api-keys.update');
Route::delete('/api-keys/{id}', [App\Http\Controllers\Admin\AIApiKeysController::class, 'destroy'])->name('admin.ai-dashboard.api-keys.destroy');
Route::post('/api-keys/{id}/toggle', [App\Http\Controllers\Admin\AIApiKeysController::class, 'toggleStatus'])->name('admin.ai-dashboard.api-keys.toggle');
Route::post('/api-keys/{id}/test', [App\Http\Controllers\Admin\AIApiKeysController::class, 'testConnection'])->name('admin.ai-dashboard.api-keys.test');

// Provider and model selection endpoints
Route::get('/providers', [App\Http\Controllers\Admin\AIDashboardController::class, 'getProviders'])->name('admin.ai-dashboard.providers');
Route::get('/providers/{provider}/models', [App\Http\Controllers\Admin\AIDashboardController::class, 'getModelsForProvider'])->name('admin.ai-dashboard.provider-models');
API Keys Management View (resources/views/admin/ai-dashboard/api-keys.blade.php):
blade

@extends('admin_layouts.admin')

@section('content')
    <div class="space-y-6">
        <!-- Flash Messages -->
        @if(session('success'))
            <div class="alert alert-success" role="alert">
                {{ session('success') }}
            </div>
        @endif

        @if(session('error'))
            <div class="alert alert-danger" role="alert">
                {{ session('error') }}
            </div>
        @endif

        <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between gap-3">
            <div>
                <h2 class="text-3xl font-bold text-gray-800">API Keys Management</h2>
                <p class="mt-1 text-gray-600">Manage API keys for different AI providers</p>
            </div>
            <div class="flex items-center gap-3">
                <a href="{{ route('admin.ai-dashboard.index') }}" class="inline-flex items-center justify-center gap-2 rounded-md border border-stroke py-2 px-4 text-center font-medium text-black hover:bg-gray-50 sm:px-6">
                    <span class="iconify" data-icon="mdi-arrow-left"></span>
                    Back to Dashboard
                </a>
                <button class="inline-flex items-center justify-center gap-2.5 rounded-md bg-primary py-2 px-4 text-center font-medium text-white hover:bg-opacity-90 sm:px-6" data-bs-toggle="modal" data-bs-target="#addApiKeyModal">
                    <span class="iconify" data-icon="mdi-plus"></span>
                    Add New API Key
                </button>
            </div>
        </div>

        <!-- API Keys Table -->
        <div class="rounded-lg border border-stroke bg-white p-6 shadow-md">
            <div class="mb-4 flex items-center justify-between">
                <h3 class="text-xl font-semibold text-gray-800">API Keys</h3>
            </div>

            @if($apiKeys->isEmpty())
                <div class="rounded-lg bg-gray-50 p-8 text-center">
                    <div class="mb-4">
                        <span class="iconify text-4xl text-gray-400" data-icon="mdi-key-outline"></span>
                    </div>
                    <h4 class="mb-2 text-lg font-medium text-gray-700">No API Keys Found</h4>
                    <p class="text-gray-500">You haven't added any API keys yet.</p>
                </div>
            @else
                <div class="overflow-x-auto">
                    <table class="w-full table-auto">
                        <thead>
                            <tr class="bg-gray-50 text-left">
                                <th class="py-4 px-4 font-medium text-gray-700">Provider</th>
                                <th class="py-4 px-4 font-medium text-gray-700">Email</th>
                                <th class="py-4 px-4 font-medium text-gray-700">API Key</th>
                                <th class="py-4 px-4 font-medium text-gray-700">Status</th>
                                <th class="py-4 px-4 font-medium text-gray-700">Actions</th>
                            </tr>
                        </thead>
                        <tbody>
                            @foreach($apiKeys as $apiKey)
                                <tr class="hover:bg-gray-50">
                                    <td class="border-b border-gray-200 py-4 px-4">
                                        <span class="inline-flex items-center rounded-full px-2.5 py-1 text-xs font-medium
                                            @if($apiKey->provider == 'google-gemini') bg-blue-100 text-blue-800
                                            @elseif($apiKey->provider == 'xai-grok') bg-green-100 text-green-800
                                            @elseif($apiKey->provider == 'openrouter') bg-purple-100 text-purple-800
                                            @else bg-gray-100 text-gray-800
                                            @endif
                                        ">
                                            {{ $providers[$apiKey->provider] ?? $apiKey->provider }}
                                        </span>
                                    </td>
                                    <td class="border-b border-gray-200 py-4 px-4">
                                        {{ $apiKey->email }}
                                    </td>
                                    <td class="border-b border-gray-200 py-4 px-4">
                                        <div class="flex items-center">
                                            <span class="api-key-masked">••••••••••••{{ substr($apiKey->api_key, -4) }}</span>
                                            <button class="toggle-key-visibility ml-2 text-gray-500 hover:text-gray-700">
                                                <span class="iconify" data-icon="mdi-eye"></span>
                                            </button>
                                            <span class="api-key-full hidden">{{ $apiKey->api_key }}</span>
                                        </div>
                                    </td>
                                    <td class="border-b border-gray-200 py-4 px-4">
                                        @if($apiKey->is_active)
                                            <span class="inline-flex items-center rounded-full bg-green-100 px-2.5 py-1 text-xs font-medium text-green-800">
                                                <span class="iconify mr-1" data-icon="mdi-check-circle"></span>
                                                Active
                                            </span>
                                        @else
                                            <span class="inline-flex items-center rounded-full bg-gray-100 px-2.5 py-1 text-xs font-medium text-gray-800">
                                                <span class="iconify mr-1" data-icon="mdi-minus-circle"></span>
                                                Inactive
                                            </span>
                                        @endif
                                    </td>
                                    <td class="border-b border-gray-200 py-4 px-4">
                                        <div class="flex items-center space-x-3">
                                            <button class="test-connection text-blue-600 hover:text-blue-800" data-id="{{ $apiKey->id }}" title="Test Connection">
                                                <span class="iconify" data-icon="mdi-connection"></span>
                                            </button>
                                            <button class="edit-api-key text-indigo-600 hover:text-indigo-800" data-id="{{ $apiKey->id }}" data-provider="{{ $apiKey->provider }}" data-email="{{ $apiKey->email }}" data-key="{{ $apiKey->api_key }}" data-active="{{ $apiKey->is_active }}" title="Edit API Key">
                                                <span class="iconify" data-icon="mdi-pencil"></span>
                                            </button>
                                            <form action="{{ route('admin.ai-dashboard.api-keys.toggle', $apiKey->id) }}" method="POST" class="d-inline">
                                                @csrf
                                                <button type="submit" class="toggle-status text-{{ $apiKey->is_active ? 'orange' : 'green' }}-600 hover:text-{{ $apiKey->is_active ? 'orange' : 'green' }}-800" title="{{ $apiKey->is_active ? 'Deactivate' : 'Activate' }}">
                                                    <span class="iconify" data-icon="mdi-{{ $apiKey->is_active ? 'toggle-switch' : 'toggle-switch-off' }}"></span>
                                                </button>
                                            </form>
                                            <form action="{{ route('admin.ai-dashboard.api-keys.destroy', $apiKey->id) }}" method="POST" class="d-inline delete-form">
                                                @csrf
                                                @method('DELETE')
                                                <button type="submit" class="delete-api-key text-red-600 hover:text-red-800" title="Delete API Key">
                                                    <span class="iconify" data-icon="mdi-delete"></span>
                                                </button>
                                            </form>
                                        </div>
                                    </td>
                                </tr>
                            @endforeach
                        </tbody>
                    </table>
                </div>
            @endif
        </div>

        <!-- Provider Information -->
        <div class="rounded-lg border border-stroke bg-white p-6 shadow-md">
            <div class="mb-4">
                <h3 class="text-xl font-semibold text-gray-800">Provider Information</h3>
                <p class="mt-1 text-gray-600">Learn about the different AI providers and how to get API keys</p>
            </div>

            <div class="grid grid-cols-1 gap-6 md:grid-cols-3">
                <!-- Google Gemini -->
                <div class="rounded-lg border border-blue-200 bg-blue-50 p-4">
                    <div class="mb-3 flex h-12 w-12 items-center justify-center rounded-lg bg-blue-100">
                        <span class="iconify text-blue-600 text-2xl" data-icon="mdi-google"></span>
                    </div>
                    <h4 class="mb-2 text-lg font-semibold text-gray-800">Google Gemini</h4>
                    <p class="mb-3 text-sm text-gray-600">Access Google's Gemini models for text generation and vision analysis.</p>
                    <a href="https://ai.google.dev/" target="_blank" class="text-blue-600 hover:text-blue-800 text-sm flex items-center">
                        <span class="iconify mr-1" data-icon="mdi-link-variant"></span>
                        Get API Key
                    </a>
                </div>

                <!-- xAI Grok -->
                <div class="rounded-lg border border-green-200 bg-green-50 p-4">
                    <div class="mb-3 flex h-12 w-12 items-center justify-center rounded-lg bg-green-100">
                        <span class="iconify text-green-600 text-2xl" data-icon="mdi-robot"></span>
                    </div>
                    <h4 class="mb-2 text-lg font-semibold text-gray-800">xAI Grok</h4>
                    <p class="mb-3 text-sm text-gray-600">Access xAI's Grok models for advanced conversation and vision capabilities.</p>
                    <a href="https://dev.grok.com/" target="_blank" class="text-green-600 hover:text-green-800 text-sm flex items-center">
                        <span class="iconify mr-1" data-icon="mdi-link-variant"></span>
                        Get API Key
                    </a>
                </div>

                <!-- OpenRouter -->
                <div class="rounded-lg border border-purple-200 bg-purple-50 p-4">
                    <div class="mb-3 flex h-12 w-12 items-center justify-center rounded-lg bg-purple-100">
                        <span class="iconify text-purple-600 text-2xl" data-icon="mdi-routes"></span>
                    </div>
                    <h4 class="mb-2 text-lg font-semibold text-gray-800">OpenRouter</h4>
                    <p class="mb-3 text-sm text-gray-600">Access multiple AI models through a single API, including Grok, DeepSeek, and more.</p>
                    <a href="https://openrouter.ai/" target="_blank" class="text-purple-600 hover:text-purple-800 text-sm flex items-center">
                        <span class="iconify mr-1" data-icon="mdi-link-variant"></span>
                        Get API Key
                    </a>
                </div>
            </div>
        </div>
    </div>

    <!-- Add API Key Modal -->
    <div class="modal fade" id="addApiKeyModal" tabindex="-1" aria-labelledby="addApiKeyModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addApiKeyModalLabel">Add New API Key</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form action="{{ route('admin.ai-dashboard.api-keys.store') }}" method="POST">
                    @csrf
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="provider" class="form-label">Provider</label>
                            <select class="form-select" id="provider" name="provider" required>
                                <option value="">Select Provider</option>
                                @foreach($providers as $code => $name)
                                    <option value="{{ $code }}">{{ $name }}</option>
                                @endforeach
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="email" name="email" placeholder="Email associated with API key" required>
                        </div>
                        <div class="mb-3">
                            <label for="api_key" class="form-label">API Key</label>
                            <input type="text" class="form-control" id="api_key" name="api_key" placeholder="Enter API Key" required>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Add API Key</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Edit API Key Modal -->
    <div class="modal fade" id="editApiKeyModal" tabindex="-1" aria-labelledby="editApiKeyModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editApiKeyModalLabel">Edit API Key</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <form id="editApiKeyForm" method="POST">
                    @csrf
                    @method('PUT')
                    <div class="modal-body">
                        <div class="mb-3">
                            <label for="edit_provider" class="form-label">Provider</label>
                            <select class="form-select" id="edit_provider" name="provider" required>
                                <option value="">Select Provider</option>
                                @foreach($providers as $code => $name)
                                    <option value="{{ $code }}">{{ $name }}</option>
                                @endforeach
                            </select>
                        </div>
                        <div class="mb-3">
                            <label for="edit_email" class="form-label">Email</label>
                            <input type="email" class="form-control" id="edit_email" name="email" placeholder="Email associated with API key" required>
                        </div>
                        <div class="mb-3">
                            <label for="edit_api_key" class="form-label">API Key</label>
                            <input type="text" class="form-control" id="edit_api_key" name="api_key" placeholder="Enter API Key" required>
                        </div>
                        <div class="mb-3 form-check">
                            <input type="checkbox" class="form-check-input" id="edit_is_active" name="is_active" value="1">
                            <label class="form-check-label" for="edit_is_active">Active</label>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary">Update API Key</button>
                    </div>
                </form>
            </div>
        </div>
    </div>

    <!-- Test Connection Modal -->
    <div class="modal fade" id="testConnectionModal" tabindex="-1" aria-labelledby="testConnectionModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="testConnectionModalLabel">API Key Connection Test</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="connection-spinner" class="text-center my-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Testing connection...</span>
                        </div>
                        <p class="mt-2">Testing connection to API service...</p>
                    </div>
                    <div id="connection-result" class="hidden">
                        <!-- Result will be shown here -->
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
@endsection

@push('scripts')
<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Toggle API key visibility
        document.querySelectorAll('.toggle-key-visibility').forEach(button => {
            button.addEventListener('click', function() {
                const parent = this.parentElement;
                const masked = parent.querySelector('.api-key-masked');
                const full = parent.querySelector('.api-key-full');
                const icon = this.querySelector('.iconify');
                
                if (masked.classList.contains('hidden')) {
                    masked.classList.remove('hidden');
                    full.classList.add('hidden');
                    icon.setAttribute('data-icon', 'mdi-eye');
                } else {
                    masked.classList.add('hidden');
                    full.classList.remove('hidden');
                    icon.setAttribute('data-icon', 'mdi-eye-off');
                }
            });
        });
        
        // Edit API Key
        document.querySelectorAll('.edit-api-key').forEach(button => {
            button.addEventListener('click', function() {
                const id = this.getAttribute('data-id');
                const provider = this.getAttribute('data-provider');
                const email = this.getAttribute('data-email');
                const apiKey = this.getAttribute('data-key');
                const isActive = this.getAttribute('data-active') === '1';
                
                document.getElementById('editApiKeyForm').setAttribute('action', '/admin/ai-dashboard/api-keys/' + id);
                document.getElementById('edit_provider').value = provider;
                document.getElementById('edit_email').value = email;
                document.getElementById('edit_api_key').value = apiKey;
                document.getElementById('edit_is_active').checked = isActive;
                
                const editModal = new bootstrap.Modal(document.getElementById('editApiKeyModal'));
                editModal.show();
            });
        });
        
        // Delete confirmation
        document.querySelectorAll('.delete-form').forEach(form => {
            form.addEventListener('submit', function(e) {
                if (!confirm('Are you sure you want to delete this API key? This action cannot be undone.')) {
                    e.preventDefault();
                }
            });
        });
        
        // Test connection
        document.querySelectorAll('.test-connection').forEach(button => {
            button.addEventListener('click', function() {
                const id = this.getAttribute('data-id');
                const testModal = new bootstrap.Modal(document.getElementById('testConnectionModal'));
                
                // Show modal with spinner
                document.getElementById('connection-spinner').classList.remove('hidden');
                document.getElementById('connection-result').classList.add('hidden');
                testModal.show();
                
                // Make AJAX request to test connection
                fetch('/admin/ai-dashboard/api-keys/' + id + '/test', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'X-CSRF-TOKEN': document.querySelector('meta[name="csrf-token"]').getAttribute('content')
                    }
                })
                .then(response => response.json())
                .then(data => {
                    // Hide spinner
                    document.getElementById('connection-spinner').classList.add('hidden');
                    
                    // Show result
                    const resultDiv = document.getElementById('connection-result');
                    resultDiv.classList.remove('hidden');
                    
                    if (data.success) {
                        resultDiv.innerHTML = `
                            <div class="alert alert-success">
                                <h5 class="font-bold">Connection Successful</h5>
                                <p>The API key is valid and working correctly.</p>
                            </div>
                        `;
                    } else {
                        resultDiv.innerHTML = `
                            <div class="alert alert-danger">
                                <h5 class="font-bold">Connection Failed</h5>
                                <p>${data.message}</p>
                            </div>
                        `;
                    }
                })
                .catch(error => {
                    // Hide spinner
                    document.getElementById('connection-spinner').classList.add('hidden');
                    
                    // Show error
                    const resultDiv = document.getElementById('connection-result');
                    resultDiv.classList.remove('hidden');
                    resultDiv.innerHTML = `
                        <div class="alert alert-danger">
                            <h5 class="font-bold">Connection Error</h5>
                            <p>An error occurred during the connection test: ${error.message}</p>
                        </div>
                    `;
                });
            });
        });
    });
</script>
@endpush
Update the Playground and Stats pages to include provider selection:
For playground.blade.php, add a provider selector before the model selector:
blade

<!-- Provider Selector -->
<div class="mb-4">
    <label for="provider" class="mb-2.5 block text-sm font-medium text-black">AI Provider</label>
    <div class="relative z-20 bg-white">
        <select data-plugin-select2 id="provider" class="relative z-20 w-full appearance-none rounded-lg border border-stroke bg-transparent py-2 px-4 outline-none transition focus:border-primary active:border-primary">
            <option value="">Select AI Provider</option>
            <!-- Providers will be loaded dynamically -->
        </select>
        <span class="absolute top-1/2 right-4 z-10 -translate-y-1/2">
            <span class="iconify" data-icon="mdi-chevron-down"></span>
        </span>
    </div>
</div>
And add JavaScript to handle provider selection:
javascript

// Load AI providers
function loadProviders() {
    fetch('/admin/ai-dashboard/providers')
        .then(response => response.json())
        .then(providers => {
            const providerSelect = document.getElementById('provider');
            providerSelect.innerHTML = '<option value="">Select AI Provider</option>';
            
            Object.entries(providers).forEach(([code, name]) => {
                providerSelect.innerHTML += `<option value="${code}">${name}</option>`;
            });
            
            // Set default provider if one was previously selected
            const savedProvider = localStorage.getItem('selectedProvider');
            if (savedProvider && providerSelect.querySelector(`option[value="${savedProvider}"]`)) {
                providerSelect.value = savedProvider;
                loadModelsForProvider(savedProvider);
            }
        })
        .catch(error => {
            console.error('Error loading providers:', error);
        });
}

// Load models for selected provider
function loadModelsForProvider(provider) {
    if (!provider) return;
    
    fetch(`/admin/ai-dashboard/providers/${provider}/models`)
        .then(response => response.json())
        .then(models => {
            const modelSelect = document.getElementById('model');
            modelSelect.innerHTML = '<option value="">Select Model</option>';
            
            Object.entries(models).forEach(([code, name]) => {
                modelSelect.innerHTML += `<option value="${code}">${name}</option>`;
            });
            
            // Handle special case for DeepSeek
            if (provider === 'openrouter') {
                document.getElementById('system-message-container').classList.remove('hidden');
            } else {
                document.getElementById('system-message-container').classList.add('hidden');
            }
            
            // Set default model if one was previously selected
            const savedModel = localStorage.getItem('selectedModel');
            if (savedModel && modelSelect.querySelector(`option[value="${savedModel}"]`)) {
                modelSelect.value = savedModel;
            } else {
                // Select first model by default
                const firstOption = modelSelect.querySelector('option:not(:first-child)');
                if (firstOption) {
                    modelSelect.value = firstOption.value;
                }
            }
        })
        .catch(error => {
            console.error('Error loading models:', error);
        });
}

// Provider selection change handler
document.getElementById('provider').addEventListener('change', function() {
    const provider = this.value;
    
    // Save selected provider
    localStorage.setItem('selectedProvider', provider);
    
    // Clear selected model
    localStorage.removeItem('selectedModel');
    
    // Load models for selected provider
    loadModelsForProvider(provider);
});

// Model selection change handler
document.getElementById('model').addEventListener('change', function() {
    // Save selected model
    localStorage.setItem('selectedModel', this.value);
});

// Initialize providers on page load
document.addEventListener('DOMContentLoaded', function() {
    loadProviders();
});
The JavaScript would be similar for the stats page, with adjustments for the specific form elements and structure.
Finally, update the generateSample and other methods in AIDashboardController to include the provider:
php

/**
 * Generate a sample result using the selected model and prompt
 */
public function generateSample(Request $request)
{
    $provider = $request->input('provider', 'openrouter');
    $contentType = $request->input('content_type');
    $contentId = $request->input('content_id');
    $model = $request->input('model', 'grok-2');
    $promptText = $request->input('prompt');
    $promptId = $request->input('prompt_id');
    $useHtmlMeta = (bool)$request->input('use_html_meta', false);

    try {
        // Get content object
        $content = $this->getContentObject($contentType, $contentId);
        if (!$content) {
            return response()->json(['error' => 'Content not found'], 404);
        }

        // Use prompt from database if ID provided
        if ($promptId) {
            $promptObj = Prompt::find($promptId);
            if ($promptObj) {
                $promptText = $promptObj->prompt_text;
            }
        }

        // Prepare data for AI model
        $prompt = $this->preparePrompt($promptText, $content, $contentType);

        // Prepare options based on model and request parameters
        $options = [
            'content_type' => $contentType,
            'max_tokens' => (int)$request->input('max_tokens', 4000),
            'temperature' => (float)$request->input('temperature', 0.7),
        ];

        // Add model-specific parameters
        if (str_starts_with($model, 'deepseek') || $provider === 'openrouter') {
            // Use custom system message if provided, otherwise use default
            $systemMessage = $request->input('system_message');
            if (empty($systemMessage)) {
                $systemMessage = $this->getSystemMessage($contentType);
            }

            $options['system_message'] = $systemMessage;
            $options['model_variant'] = $request->input('deepseek_model', 'deepseek-chat');
        }

        // Initialize AI service with selected provider
        $aiService = new AIService($provider);

        // Call AI model to generate content
        $result = $aiService->generate($model, $prompt, $options, $useHtmlMeta);

        // Format the result with our helper
        if ($contentType === 'posts' && is_array($result)) {
            // For posts with meta title and description
            if (isset($result['meta_title'])) {
                $result['meta_title'] = \App\Helpers\OpenRouterResponseFormatter::formatResponse($result['meta_title'], false);
            }
            if (isset($result['meta_description'])) {
                $result['meta_description'] = \App\Helpers\OpenRouterResponseFormatter::formatResponse($result['meta_description'], true);
            }
        } else {
            // For other content types
            $result = \App\Helpers\OpenRouterResponseFormatter::formatResponse($result, true);
        }

        return response()->json([
            'success' => true,
            'result' => $result,
            'content' => $content,
            'prompt' => $prompt
        ]);
    } catch (\Exception $e) {
        Log::error('Error generating sample', [
            'error' => $e->getMessage(),
            'trace' => $e->getTraceAsString()
        ]);

        return response()->json([
            'success' => false,
            'error' => 'Error generating content: ' . $e->getMessage()
        ], 500);
    }
}
Also update the analyzeImage method in VisionAnalysisController:
php

/**
 * Process image for analysis
 */
public function analyze(Request $request)
{
    $request->validate([
        'image' => 'required|image|max:10240', // Max 10MB
        'prompt' => 'required|string|max:1000',
        'model' => 'required|string',
        'provider' => 'nullable|string',
    ]);

    try {
        // Store the uploaded image
        $imagePath = $request->file('image')->store('vision-analysis', 's3');
        $imageUrl = url(Storage::url($imagePath));
        
        // Get provider, default to OpenRouter
        $provider = $request->input('provider', 'openrouter');

        // Determine model settings
        $options = [
            'temperature' => (float)$request->input('temperature', 0.7),
        ];

        if ($provider === 'openrouter') {
            $options['use_deepseek'] = str_starts_with($request->input('model'), 'deepseek');
            if ($options['use_deepseek']) {
                $options['deepseek_model'] = $request->input('deepseek_model', 'deepseek-vision');
                $options['system_message'] = $request->input('system_message');
            }
        }

        // Initialize AI service with selected provider
        $aiService = new AIService($provider);

        // Call AI Vision API
        $result = $aiService->analyzeImage($imageUrl, $request->prompt, $options);

        return view('admin.ai-dashboard.vision-results', [
            'imageUrl' => $imageUrl,
            'prompt' => $request->prompt,
            'result' => $result,
            'model' => $request->input('model'),
            'provider' => $provider,
        ]);
    } catch (\Exception $e) {
        Log::error('Vision analysis error', [
            'error' => $e->getMessage(),
            'trace' => $e->getTraceAsString()
        ]);

        return back()->withErrors([
            'api_error' => 'Vision analysis failed: ' . $e->getMessage(),
        ])->withInput();
    }
}
That completes the main components of the API key management feature. This implementation provides a solid foundation for managing multiple AI providers and their API keys, including Google Gemini, xAI Grok, and the currently used OpenRouter.
The codebase is designed to be extendable, making it easy to add new providers in the future. It also includes features like API key testing, showing/hiding API keys, toggling key status, and selecting providers and models in the playground and stats pages.

